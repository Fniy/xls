package com.baixuegu.sign;

import com.baixuegu.sign.download.Downloader;
import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.openxml4j.opc.OPCPackage;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.streaming.SXSSFSheet;
import org.apache.poi.xssf.streaming.SXSSFWorkbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import javax.swing.*;
import java.awt.*;
import java.io.*;
import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.file.Path;
import java.nio.file.Paths;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {

    Path inDir = Paths.get("原始表格");
    Path outDir = Paths.get("自动化导出");

    Workbook workbook;
    Sheet sh;
    Row row;

    Path xlsFile;
    String xls;

    public App() {

    }

    public void handleAll() throws IOException, InvalidFormatException {
        String[] xlsList = inDir.toFile().list(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(".xls");
            }
        });

        for(String xls:xlsList){
            handleXls(xls);
        }
    }

    public void handleXls(String xls) throws IOException, InvalidFormatException {
        this.xls = xls;

        xlsFile = inDir.resolve(xls);

        workbook = WorkbookFactory.create(xlsFile.toFile());
        sh = workbook.getSheetAt(0);
        for (int rownum = 3; rownum < sh.getLastRowNum(); rownum++) {

            export(rownum);
        }
        workbook.close();
    }

    public static void main(String[] args) {
        try {
            new App().handleAll();
            System.out.println("下载完毕！");
        } catch (Exception e) {
            System.err.println("呀，出错了，请再运行几遍，或将当前原始表格发给技术人员！");
        }
    }

    public void export(int rownum){

        row = sh.getRow(rownum);

        boolean bool = false;
        for (int colnum = 15; colnum < row.getLastCellNum(); colnum++) {

            try {
                String username = row.getCell(0).getStringCellValue();
                String address = row.getCell(9).getStringCellValue();
                String picName = sh.getRow(2).getCell(colnum).getStringCellValue();
                Hyperlink picLink = row.getCell(colnum).getHyperlink();

                if (picLink != null) {

                    if(!bool){
                        System.out.print(xls+"："+username+", "+address);
                    }
                    System.out.print(", "+picName);

                    bool = true;

                    String linkAddress = picLink.getAddress();
                    String suffix = FilenameUtils.getExtension(linkAddress);
                    if(suffix!=null){
                        suffix = "." + suffix;
                    }
                    Path picPath = outDir.resolve(xlsFile.getFileName()).resolve(username).resolve(address).resolve(picName + suffix);
                    FileUtils.copyURLToFile(new URL(picLink.getAddress()), picPath.toFile());
                }

            }catch (Exception e){
                e.printStackTrace();
            }

        }

        if(bool){
            System.out.println("\n");
        }

    }

}
